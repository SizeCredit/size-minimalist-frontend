/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type YieldCurveStruct = {
  tenors: BigNumberish[];
  aprs: BigNumberish[];
  marketRateMultipliers: BigNumberish[];
};

export type YieldCurveStructOutput = [
  tenors: bigint[],
  aprs: bigint[],
  marketRateMultipliers: bigint[],
] & { tenors: bigint[]; aprs: bigint[]; marketRateMultipliers: bigint[] };

export type BuyCreditLimitParamsStruct = {
  maxDueDate: BigNumberish;
  curveRelativeTime: YieldCurveStruct;
};

export type BuyCreditLimitParamsStructOutput = [
  maxDueDate: bigint,
  curveRelativeTime: YieldCurveStructOutput,
] & { maxDueDate: bigint; curveRelativeTime: YieldCurveStructOutput };

export type BuyCreditMarketParamsStruct = {
  borrower: AddressLike;
  creditPositionId: BigNumberish;
  amount: BigNumberish;
  tenor: BigNumberish;
  deadline: BigNumberish;
  minAPR: BigNumberish;
  exactAmountIn: boolean;
};

export type BuyCreditMarketParamsStructOutput = [
  borrower: string,
  creditPositionId: bigint,
  amount: bigint,
  tenor: bigint,
  deadline: bigint,
  minAPR: bigint,
  exactAmountIn: boolean,
] & {
  borrower: string;
  creditPositionId: bigint;
  amount: bigint;
  tenor: bigint;
  deadline: bigint;
  minAPR: bigint;
  exactAmountIn: boolean;
};

export type ClaimParamsStruct = { creditPositionId: BigNumberish };

export type ClaimParamsStructOutput = [creditPositionId: bigint] & {
  creditPositionId: bigint;
};

export type CompensateParamsStruct = {
  creditPositionWithDebtToRepayId: BigNumberish;
  creditPositionToCompensateId: BigNumberish;
  amount: BigNumberish;
};

export type CompensateParamsStructOutput = [
  creditPositionWithDebtToRepayId: bigint,
  creditPositionToCompensateId: bigint,
  amount: bigint,
] & {
  creditPositionWithDebtToRepayId: bigint;
  creditPositionToCompensateId: bigint;
  amount: bigint;
};

export type DataViewStruct = {
  nextDebtPositionId: BigNumberish;
  nextCreditPositionId: BigNumberish;
  underlyingCollateralToken: AddressLike;
  underlyingBorrowToken: AddressLike;
  collateralToken: AddressLike;
  borrowAToken: AddressLike;
  debtToken: AddressLike;
  variablePool: AddressLike;
};

export type DataViewStructOutput = [
  nextDebtPositionId: bigint,
  nextCreditPositionId: bigint,
  underlyingCollateralToken: string,
  underlyingBorrowToken: string,
  collateralToken: string,
  borrowAToken: string,
  debtToken: string,
  variablePool: string,
] & {
  nextDebtPositionId: bigint;
  nextCreditPositionId: bigint;
  underlyingCollateralToken: string;
  underlyingBorrowToken: string;
  collateralToken: string;
  borrowAToken: string;
  debtToken: string;
  variablePool: string;
};

export type DepositParamsStruct = {
  token: AddressLike;
  amount: BigNumberish;
  to: AddressLike;
};

export type DepositParamsStructOutput = [
  token: string,
  amount: bigint,
  to: string,
] & { token: string; amount: bigint; to: string };

export type InitializeFeeConfigParamsStruct = {
  swapFeeAPR: BigNumberish;
  fragmentationFee: BigNumberish;
  liquidationRewardPercent: BigNumberish;
  overdueCollateralProtocolPercent: BigNumberish;
  collateralProtocolPercent: BigNumberish;
  feeRecipient: AddressLike;
};

export type InitializeFeeConfigParamsStructOutput = [
  swapFeeAPR: bigint,
  fragmentationFee: bigint,
  liquidationRewardPercent: bigint,
  overdueCollateralProtocolPercent: bigint,
  collateralProtocolPercent: bigint,
  feeRecipient: string,
] & {
  swapFeeAPR: bigint;
  fragmentationFee: bigint;
  liquidationRewardPercent: bigint;
  overdueCollateralProtocolPercent: bigint;
  collateralProtocolPercent: bigint;
  feeRecipient: string;
};

export type CreditPositionStruct = {
  lender: AddressLike;
  forSale: boolean;
  credit: BigNumberish;
  debtPositionId: BigNumberish;
};

export type CreditPositionStructOutput = [
  lender: string,
  forSale: boolean,
  credit: bigint,
  debtPositionId: bigint,
] & {
  lender: string;
  forSale: boolean;
  credit: bigint;
  debtPositionId: bigint;
};

export type DebtPositionStruct = {
  borrower: AddressLike;
  futureValue: BigNumberish;
  dueDate: BigNumberish;
  liquidityIndexAtRepayment: BigNumberish;
};

export type DebtPositionStructOutput = [
  borrower: string,
  futureValue: bigint,
  dueDate: bigint,
  liquidityIndexAtRepayment: bigint,
] & {
  borrower: string;
  futureValue: bigint;
  dueDate: bigint;
  liquidityIndexAtRepayment: bigint;
};

export type SellCreditMarketParamsStruct = {
  lender: AddressLike;
  creditPositionId: BigNumberish;
  amount: BigNumberish;
  tenor: BigNumberish;
  deadline: BigNumberish;
  maxAPR: BigNumberish;
  exactAmountIn: boolean;
};

export type SellCreditMarketParamsStructOutput = [
  lender: string,
  creditPositionId: bigint,
  amount: bigint,
  tenor: bigint,
  deadline: bigint,
  maxAPR: bigint,
  exactAmountIn: boolean,
] & {
  lender: string;
  creditPositionId: bigint;
  amount: bigint;
  tenor: bigint;
  deadline: bigint;
  maxAPR: bigint;
  exactAmountIn: boolean;
};

export type LimitOrderStruct = {
  maxDueDate: BigNumberish;
  curveRelativeTime: YieldCurveStruct;
};

export type LimitOrderStructOutput = [
  maxDueDate: bigint,
  curveRelativeTime: YieldCurveStructOutput,
] & { maxDueDate: bigint; curveRelativeTime: YieldCurveStructOutput };

export type UserStruct = {
  loanOffer: LimitOrderStruct;
  borrowOffer: LimitOrderStruct;
  openingLimitBorrowCR: BigNumberish;
  allCreditPositionsForSaleDisabled: boolean;
};

export type UserStructOutput = [
  loanOffer: LimitOrderStructOutput,
  borrowOffer: LimitOrderStructOutput,
  openingLimitBorrowCR: bigint,
  allCreditPositionsForSaleDisabled: boolean,
] & {
  loanOffer: LimitOrderStructOutput;
  borrowOffer: LimitOrderStructOutput;
  openingLimitBorrowCR: bigint;
  allCreditPositionsForSaleDisabled: boolean;
};

export type UserViewStruct = {
  user: UserStruct;
  account: AddressLike;
  collateralTokenBalance: BigNumberish;
  borrowATokenBalance: BigNumberish;
  debtBalance: BigNumberish;
};

export type UserViewStructOutput = [
  user: UserStructOutput,
  account: string,
  collateralTokenBalance: bigint,
  borrowATokenBalance: bigint,
  debtBalance: bigint,
] & {
  user: UserStructOutput;
  account: string;
  collateralTokenBalance: bigint;
  borrowATokenBalance: bigint;
  debtBalance: bigint;
};

export type InitializeRiskConfigParamsStruct = {
  crOpening: BigNumberish;
  crLiquidation: BigNumberish;
  minimumCreditBorrowAToken: BigNumberish;
  borrowATokenCap: BigNumberish;
  minTenor: BigNumberish;
  maxTenor: BigNumberish;
};

export type InitializeRiskConfigParamsStructOutput = [
  crOpening: bigint,
  crLiquidation: bigint,
  minimumCreditBorrowAToken: bigint,
  borrowATokenCap: bigint,
  minTenor: bigint,
  maxTenor: bigint,
] & {
  crOpening: bigint;
  crLiquidation: bigint;
  minimumCreditBorrowAToken: bigint;
  borrowATokenCap: bigint;
  minTenor: bigint;
  maxTenor: bigint;
};

export type InitializeOracleParamsStruct = {
  priceFeed: AddressLike;
  variablePoolBorrowRateStaleRateInterval: BigNumberish;
};

export type InitializeOracleParamsStructOutput = [
  priceFeed: string,
  variablePoolBorrowRateStaleRateInterval: bigint,
] & { priceFeed: string; variablePoolBorrowRateStaleRateInterval: bigint };

export type InitializeDataParamsStruct = {
  weth: AddressLike;
  underlyingCollateralToken: AddressLike;
  underlyingBorrowToken: AddressLike;
  variablePool: AddressLike;
  borrowATokenV1_5: AddressLike;
};

export type InitializeDataParamsStructOutput = [
  weth: string,
  underlyingCollateralToken: string,
  underlyingBorrowToken: string,
  variablePool: string,
  borrowATokenV1_5: string,
] & {
  weth: string;
  underlyingCollateralToken: string;
  underlyingBorrowToken: string;
  variablePool: string;
  borrowATokenV1_5: string;
};

export type LiquidateParamsStruct = {
  debtPositionId: BigNumberish;
  minimumCollateralProfit: BigNumberish;
  deadline: BigNumberish;
};

export type LiquidateParamsStructOutput = [
  debtPositionId: bigint,
  minimumCollateralProfit: bigint,
  deadline: bigint,
] & {
  debtPositionId: bigint;
  minimumCollateralProfit: bigint;
  deadline: bigint;
};

export type LiquidateWithReplacementParamsStruct = {
  debtPositionId: BigNumberish;
  borrower: AddressLike;
  minimumCollateralProfit: BigNumberish;
  deadline: BigNumberish;
  minAPR: BigNumberish;
};

export type LiquidateWithReplacementParamsStructOutput = [
  debtPositionId: bigint,
  borrower: string,
  minimumCollateralProfit: bigint,
  deadline: bigint,
  minAPR: bigint,
] & {
  debtPositionId: bigint;
  borrower: string;
  minimumCollateralProfit: bigint;
  deadline: bigint;
  minAPR: bigint;
};

export type RepayParamsStruct = {
  debtPositionId: BigNumberish;
  borrower: AddressLike;
};

export type RepayParamsStructOutput = [
  debtPositionId: bigint,
  borrower: string,
] & { debtPositionId: bigint; borrower: string };

export type SelfLiquidateParamsStruct = { creditPositionId: BigNumberish };

export type SelfLiquidateParamsStructOutput = [creditPositionId: bigint] & {
  creditPositionId: bigint;
};

export type SellCreditLimitParamsStruct = {
  maxDueDate: BigNumberish;
  curveRelativeTime: YieldCurveStruct;
};

export type SellCreditLimitParamsStructOutput = [
  maxDueDate: bigint,
  curveRelativeTime: YieldCurveStructOutput,
] & { maxDueDate: bigint; curveRelativeTime: YieldCurveStructOutput };

export type SetUserConfigurationParamsStruct = {
  openingLimitBorrowCR: BigNumberish;
  allCreditPositionsForSaleDisabled: boolean;
  creditPositionIdsForSale: boolean;
  creditPositionIds: BigNumberish[];
};

export type SetUserConfigurationParamsStructOutput = [
  openingLimitBorrowCR: bigint,
  allCreditPositionsForSaleDisabled: boolean,
  creditPositionIdsForSale: boolean,
  creditPositionIds: bigint[],
] & {
  openingLimitBorrowCR: bigint;
  allCreditPositionsForSaleDisabled: boolean;
  creditPositionIdsForSale: boolean;
  creditPositionIds: bigint[];
};

export type UpdateConfigParamsStruct = { key: string; value: BigNumberish };

export type UpdateConfigParamsStructOutput = [key: string, value: bigint] & {
  key: string;
  value: bigint;
};

export type WithdrawParamsStruct = {
  token: AddressLike;
  amount: BigNumberish;
  to: AddressLike;
};

export type WithdrawParamsStructOutput = [
  token: string,
  amount: bigint,
  to: string,
] & { token: string; amount: bigint; to: string };

export declare namespace BuyCreditMarket {
  export type SwapDataBuyCreditMarketStruct = {
    creditPosition: CreditPositionStruct;
    borrower: AddressLike;
    creditAmountOut: BigNumberish;
    cashAmountIn: BigNumberish;
    swapFee: BigNumberish;
    fragmentationFee: BigNumberish;
    tenor: BigNumberish;
  };

  export type SwapDataBuyCreditMarketStructOutput = [
    creditPosition: CreditPositionStructOutput,
    borrower: string,
    creditAmountOut: bigint,
    cashAmountIn: bigint,
    swapFee: bigint,
    fragmentationFee: bigint,
    tenor: bigint,
  ] & {
    creditPosition: CreditPositionStructOutput;
    borrower: string;
    creditAmountOut: bigint;
    cashAmountIn: bigint;
    swapFee: bigint;
    fragmentationFee: bigint;
    tenor: bigint;
  };
}

export declare namespace SellCreditMarket {
  export type SwapDataSellCreditMarketStruct = {
    creditPosition: CreditPositionStruct;
    creditAmountIn: BigNumberish;
    cashAmountOut: BigNumberish;
    swapFee: BigNumberish;
    fragmentationFee: BigNumberish;
    tenor: BigNumberish;
  };

  export type SwapDataSellCreditMarketStructOutput = [
    creditPosition: CreditPositionStructOutput,
    creditAmountIn: bigint,
    cashAmountOut: bigint,
    swapFee: bigint,
    fragmentationFee: bigint,
    tenor: bigint,
  ] & {
    creditPosition: CreditPositionStructOutput;
    creditAmountIn: bigint;
    cashAmountOut: bigint;
    swapFee: bigint;
    fragmentationFee: bigint;
    tenor: bigint;
  };
}

export interface SizeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "UPGRADE_INTERFACE_VERSION"
      | "buyCreditLimit"
      | "buyCreditMarket"
      | "claim"
      | "collateralRatio"
      | "compensate"
      | "data"
      | "debtTokenAmountToCollateralTokenAmount"
      | "deposit"
      | "feeConfig"
      | "getBorrowOfferAPR"
      | "getBuyCreditMarketSwapData"
      | "getCreditPosition"
      | "getDebtPosition"
      | "getDebtPositionAssignedCollateral"
      | "getLoanOfferAPR"
      | "getLoanStatus"
      | "getPositionsCount"
      | "getRoleAdmin"
      | "getSellCreditMarketSwapData"
      | "getSwapFee"
      | "getUserView"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isCreditPositionId"
      | "isDebtPositionId"
      | "isDebtPositionLiquidatable"
      | "isUserUnderwater"
      | "liquidate"
      | "liquidateWithReplacement"
      | "multicall"
      | "oracle"
      | "pause"
      | "paused"
      | "proxiableUUID"
      | "renounceRole"
      | "repay"
      | "revokeRole"
      | "riskConfig"
      | "selfLiquidate"
      | "sellCreditLimit"
      | "sellCreditMarket"
      | "setUserConfiguration"
      | "setVariablePoolBorrowRate"
      | "supportsInterface"
      | "unpause"
      | "updateConfig"
      | "upgradeToAndCall"
      | "version"
      | "withdraw",
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Initialized"
      | "Paused"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Unpaused"
      | "Upgraded"
      | "VariablePoolBorrowRateUpdated",
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "buyCreditLimit",
    values: [BuyCreditLimitParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: "buyCreditMarket",
    values: [BuyCreditMarketParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [ClaimParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: "collateralRatio",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "compensate",
    values: [CompensateParamsStruct],
  ): string;
  encodeFunctionData(functionFragment: "data", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "debtTokenAmountToCollateralTokenAmount",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [DepositParamsStruct],
  ): string;
  encodeFunctionData(functionFragment: "feeConfig", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBorrowOfferAPR",
    values: [AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyCreditMarketSwapData",
    values: [BuyCreditMarketParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: "getCreditPosition",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "getDebtPosition",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "getDebtPositionAssignedCollateral",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "getLoanOfferAPR",
    values: [AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "getLoanStatus",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionsCount",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: "getSellCreditMarketSwapData",
    values: [SellCreditMarketParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapFee",
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "getUserView",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      InitializeFeeConfigParamsStruct,
      InitializeRiskConfigParamsStruct,
      InitializeOracleParamsStruct,
      InitializeDataParamsStruct,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: "isCreditPositionId",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "isDebtPositionId",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "isDebtPositionLiquidatable",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "isUserUnderwater",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [LiquidateParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateWithReplacement",
    values: [LiquidateWithReplacementParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]],
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [RepayParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "riskConfig",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "selfLiquidate",
    values: [SelfLiquidateParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: "sellCreditLimit",
    values: [SellCreditLimitParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: "sellCreditMarket",
    values: [SellCreditMarketParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: "setUserConfiguration",
    values: [SetUserConfigurationParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: "setVariablePoolBorrowRate",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike],
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateConfig",
    values: [UpdateConfigParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [WithdrawParamsStruct],
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyCreditLimit",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyCreditMarket",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collateralRatio",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "compensate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "data", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "debtTokenAmountToCollateralTokenAmount",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowOfferAPR",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBuyCreditMarketSwapData",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreditPosition",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDebtPosition",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDebtPositionAssignedCollateral",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLoanOfferAPR",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLoanStatus",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionsCount",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSellCreditMarketSwapData",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "getSwapFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserView",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isCreditPositionId",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDebtPositionId",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDebtPositionLiquidatable",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUserUnderwater",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidateWithReplacement",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "riskConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "selfLiquidate",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellCreditLimit",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellCreditMarket",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserConfiguration",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVariablePoolBorrowRate",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateConfig",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike,
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string,
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike,
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike,
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VariablePoolBorrowRateUpdatedEvent {
  export type InputTuple = [
    sender: AddressLike,
    oldBorrowRate: BigNumberish,
    newBorrowRate: BigNumberish,
  ];
  export type OutputTuple = [
    sender: string,
    oldBorrowRate: bigint,
    newBorrowRate: bigint,
  ];
  export interface OutputObject {
    sender: string;
    oldBorrowRate: bigint;
    newBorrowRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Size extends BaseContract {
  connect(runner?: ContractRunner | null): Size;
  waitForDeployment(): Promise<this>;

  interface: SizeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  buyCreditLimit: TypedContractMethod<
    [params: BuyCreditLimitParamsStruct],
    [void],
    "payable"
  >;

  buyCreditMarket: TypedContractMethod<
    [params: BuyCreditMarketParamsStruct],
    [void],
    "payable"
  >;

  claim: TypedContractMethod<[params: ClaimParamsStruct], [void], "payable">;

  collateralRatio: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  compensate: TypedContractMethod<
    [params: CompensateParamsStruct],
    [void],
    "payable"
  >;

  data: TypedContractMethod<[], [DataViewStructOutput], "view">;

  debtTokenAmountToCollateralTokenAmount: TypedContractMethod<
    [borrowATokenAmount: BigNumberish],
    [bigint],
    "view"
  >;

  deposit: TypedContractMethod<
    [params: DepositParamsStruct],
    [void],
    "payable"
  >;

  feeConfig: TypedContractMethod<
    [],
    [InitializeFeeConfigParamsStructOutput],
    "view"
  >;

  getBorrowOfferAPR: TypedContractMethod<
    [borrower: AddressLike, tenor: BigNumberish],
    [bigint],
    "view"
  >;

  getBuyCreditMarketSwapData: TypedContractMethod<
    [params: BuyCreditMarketParamsStruct],
    [BuyCreditMarket.SwapDataBuyCreditMarketStructOutput],
    "view"
  >;

  getCreditPosition: TypedContractMethod<
    [creditPositionId: BigNumberish],
    [CreditPositionStructOutput],
    "view"
  >;

  getDebtPosition: TypedContractMethod<
    [debtPositionId: BigNumberish],
    [DebtPositionStructOutput],
    "view"
  >;

  getDebtPositionAssignedCollateral: TypedContractMethod<
    [debtPositionId: BigNumberish],
    [bigint],
    "view"
  >;

  getLoanOfferAPR: TypedContractMethod<
    [lender: AddressLike, tenor: BigNumberish],
    [bigint],
    "view"
  >;

  getLoanStatus: TypedContractMethod<
    [positionId: BigNumberish],
    [bigint],
    "view"
  >;

  getPositionsCount: TypedContractMethod<[], [[bigint, bigint]], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getSellCreditMarketSwapData: TypedContractMethod<
    [params: SellCreditMarketParamsStruct],
    [SellCreditMarket.SwapDataSellCreditMarketStructOutput],
    "view"
  >;

  getSwapFee: TypedContractMethod<
    [cash: BigNumberish, tenor: BigNumberish],
    [bigint],
    "view"
  >;

  getUserView: TypedContractMethod<
    [user: AddressLike],
    [UserViewStructOutput],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      owner: AddressLike,
      f: InitializeFeeConfigParamsStruct,
      r: InitializeRiskConfigParamsStruct,
      o: InitializeOracleParamsStruct,
      d: InitializeDataParamsStruct,
    ],
    [void],
    "nonpayable"
  >;

  isCreditPositionId: TypedContractMethod<
    [creditPositionId: BigNumberish],
    [boolean],
    "view"
  >;

  isDebtPositionId: TypedContractMethod<
    [debtPositionId: BigNumberish],
    [boolean],
    "view"
  >;

  isDebtPositionLiquidatable: TypedContractMethod<
    [debtPositionId: BigNumberish],
    [boolean],
    "view"
  >;

  isUserUnderwater: TypedContractMethod<[user: AddressLike], [boolean], "view">;

  liquidate: TypedContractMethod<
    [params: LiquidateParamsStruct],
    [bigint],
    "payable"
  >;

  liquidateWithReplacement: TypedContractMethod<
    [params: LiquidateWithReplacementParamsStruct],
    [
      [bigint, bigint] & {
        liquidatorProfitCollateralToken: bigint;
        liquidatorProfitBorrowToken: bigint;
      },
    ],
    "payable"
  >;

  multicall: TypedContractMethod<[_data: BytesLike[]], [string[]], "payable">;

  oracle: TypedContractMethod<[], [InitializeOracleParamsStructOutput], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  repay: TypedContractMethod<[params: RepayParamsStruct], [void], "payable">;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  riskConfig: TypedContractMethod<
    [],
    [InitializeRiskConfigParamsStructOutput],
    "view"
  >;

  selfLiquidate: TypedContractMethod<
    [params: SelfLiquidateParamsStruct],
    [void],
    "payable"
  >;

  sellCreditLimit: TypedContractMethod<
    [params: SellCreditLimitParamsStruct],
    [void],
    "payable"
  >;

  sellCreditMarket: TypedContractMethod<
    [params: SellCreditMarketParamsStruct],
    [void],
    "payable"
  >;

  setUserConfiguration: TypedContractMethod<
    [params: SetUserConfigurationParamsStruct],
    [void],
    "payable"
  >;

  setVariablePoolBorrowRate: TypedContractMethod<
    [borrowRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateConfig: TypedContractMethod<
    [params: UpdateConfigParamsStruct],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  version: TypedContractMethod<[], [string], "view">;

  withdraw: TypedContractMethod<
    [params: WithdrawParamsStruct],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "buyCreditLimit",
  ): TypedContractMethod<
    [params: BuyCreditLimitParamsStruct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "buyCreditMarket",
  ): TypedContractMethod<
    [params: BuyCreditMarketParamsStruct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "claim",
  ): TypedContractMethod<[params: ClaimParamsStruct], [void], "payable">;
  getFunction(
    nameOrSignature: "collateralRatio",
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "compensate",
  ): TypedContractMethod<[params: CompensateParamsStruct], [void], "payable">;
  getFunction(
    nameOrSignature: "data",
  ): TypedContractMethod<[], [DataViewStructOutput], "view">;
  getFunction(
    nameOrSignature: "debtTokenAmountToCollateralTokenAmount",
  ): TypedContractMethod<[borrowATokenAmount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "deposit",
  ): TypedContractMethod<[params: DepositParamsStruct], [void], "payable">;
  getFunction(
    nameOrSignature: "feeConfig",
  ): TypedContractMethod<[], [InitializeFeeConfigParamsStructOutput], "view">;
  getFunction(
    nameOrSignature: "getBorrowOfferAPR",
  ): TypedContractMethod<
    [borrower: AddressLike, tenor: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBuyCreditMarketSwapData",
  ): TypedContractMethod<
    [params: BuyCreditMarketParamsStruct],
    [BuyCreditMarket.SwapDataBuyCreditMarketStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCreditPosition",
  ): TypedContractMethod<
    [creditPositionId: BigNumberish],
    [CreditPositionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDebtPosition",
  ): TypedContractMethod<
    [debtPositionId: BigNumberish],
    [DebtPositionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDebtPositionAssignedCollateral",
  ): TypedContractMethod<[debtPositionId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLoanOfferAPR",
  ): TypedContractMethod<
    [lender: AddressLike, tenor: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLoanStatus",
  ): TypedContractMethod<[positionId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPositionsCount",
  ): TypedContractMethod<[], [[bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin",
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getSellCreditMarketSwapData",
  ): TypedContractMethod<
    [params: SellCreditMarketParamsStruct],
    [SellCreditMarket.SwapDataSellCreditMarketStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSwapFee",
  ): TypedContractMethod<
    [cash: BigNumberish, tenor: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserView",
  ): TypedContractMethod<[user: AddressLike], [UserViewStructOutput], "view">;
  getFunction(
    nameOrSignature: "grantRole",
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole",
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize",
  ): TypedContractMethod<
    [
      owner: AddressLike,
      f: InitializeFeeConfigParamsStruct,
      r: InitializeRiskConfigParamsStruct,
      o: InitializeOracleParamsStruct,
      d: InitializeDataParamsStruct,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isCreditPositionId",
  ): TypedContractMethod<[creditPositionId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isDebtPositionId",
  ): TypedContractMethod<[debtPositionId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isDebtPositionLiquidatable",
  ): TypedContractMethod<[debtPositionId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isUserUnderwater",
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "liquidate",
  ): TypedContractMethod<[params: LiquidateParamsStruct], [bigint], "payable">;
  getFunction(nameOrSignature: "liquidateWithReplacement"): TypedContractMethod<
    [params: LiquidateWithReplacementParamsStruct],
    [
      [bigint, bigint] & {
        liquidatorProfitCollateralToken: bigint;
        liquidatorProfitBorrowToken: bigint;
      },
    ],
    "payable"
  >;
  getFunction(
    nameOrSignature: "multicall",
  ): TypedContractMethod<[_data: BytesLike[]], [string[]], "payable">;
  getFunction(
    nameOrSignature: "oracle",
  ): TypedContractMethod<[], [InitializeOracleParamsStructOutput], "view">;
  getFunction(
    nameOrSignature: "pause",
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused",
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceRole",
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "repay",
  ): TypedContractMethod<[params: RepayParamsStruct], [void], "payable">;
  getFunction(
    nameOrSignature: "revokeRole",
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "riskConfig",
  ): TypedContractMethod<[], [InitializeRiskConfigParamsStructOutput], "view">;
  getFunction(
    nameOrSignature: "selfLiquidate",
  ): TypedContractMethod<
    [params: SelfLiquidateParamsStruct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "sellCreditLimit",
  ): TypedContractMethod<
    [params: SellCreditLimitParamsStruct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "sellCreditMarket",
  ): TypedContractMethod<
    [params: SellCreditMarketParamsStruct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setUserConfiguration",
  ): TypedContractMethod<
    [params: SetUserConfigurationParamsStruct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setVariablePoolBorrowRate",
  ): TypedContractMethod<[borrowRate: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface",
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "unpause",
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateConfig",
  ): TypedContractMethod<
    [params: UpdateConfigParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall",
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "version",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw",
  ): TypedContractMethod<[params: WithdrawParamsStruct], [void], "payable">;

  getEvent(
    key: "Initialized",
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "Paused",
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged",
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted",
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked",
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused",
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded",
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "VariablePoolBorrowRateUpdated",
  ): TypedContractEvent<
    VariablePoolBorrowRateUpdatedEvent.InputTuple,
    VariablePoolBorrowRateUpdatedEvent.OutputTuple,
    VariablePoolBorrowRateUpdatedEvent.OutputObject
  >;

  filters: {
    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "VariablePoolBorrowRateUpdated(address,uint128,uint128)": TypedContractEvent<
      VariablePoolBorrowRateUpdatedEvent.InputTuple,
      VariablePoolBorrowRateUpdatedEvent.OutputTuple,
      VariablePoolBorrowRateUpdatedEvent.OutputObject
    >;
    VariablePoolBorrowRateUpdated: TypedContractEvent<
      VariablePoolBorrowRateUpdatedEvent.InputTuple,
      VariablePoolBorrowRateUpdatedEvent.OutputTuple,
      VariablePoolBorrowRateUpdatedEvent.OutputObject
    >;
  };
}
