/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type InitializeFeeConfigParamsStruct = {
  swapFeeAPR: BigNumberish;
  fragmentationFee: BigNumberish;
  liquidationRewardPercent: BigNumberish;
  overdueCollateralProtocolPercent: BigNumberish;
  collateralProtocolPercent: BigNumberish;
  feeRecipient: AddressLike;
};

export type InitializeFeeConfigParamsStructOutput = [
  swapFeeAPR: bigint,
  fragmentationFee: bigint,
  liquidationRewardPercent: bigint,
  overdueCollateralProtocolPercent: bigint,
  collateralProtocolPercent: bigint,
  feeRecipient: string,
] & {
  swapFeeAPR: bigint;
  fragmentationFee: bigint;
  liquidationRewardPercent: bigint;
  overdueCollateralProtocolPercent: bigint;
  collateralProtocolPercent: bigint;
  feeRecipient: string;
};

export type InitializeRiskConfigParamsStruct = {
  crOpening: BigNumberish;
  crLiquidation: BigNumberish;
  minimumCreditBorrowAToken: BigNumberish;
  borrowATokenCap: BigNumberish;
  minTenor: BigNumberish;
  maxTenor: BigNumberish;
};

export type InitializeRiskConfigParamsStructOutput = [
  crOpening: bigint,
  crLiquidation: bigint,
  minimumCreditBorrowAToken: bigint,
  borrowATokenCap: bigint,
  minTenor: bigint,
  maxTenor: bigint,
] & {
  crOpening: bigint;
  crLiquidation: bigint;
  minimumCreditBorrowAToken: bigint;
  borrowATokenCap: bigint;
  minTenor: bigint;
  maxTenor: bigint;
};

export type InitializeOracleParamsStruct = {
  priceFeed: AddressLike;
  variablePoolBorrowRateStaleRateInterval: BigNumberish;
};

export type InitializeOracleParamsStructOutput = [
  priceFeed: string,
  variablePoolBorrowRateStaleRateInterval: bigint,
] & { priceFeed: string; variablePoolBorrowRateStaleRateInterval: bigint };

export type InitializeDataParamsStruct = {
  weth: AddressLike;
  underlyingCollateralToken: AddressLike;
  underlyingBorrowToken: AddressLike;
  variablePool: AddressLike;
  borrowATokenV1_5: AddressLike;
  sizeFactory: AddressLike;
};

export type InitializeDataParamsStructOutput = [
  weth: string,
  underlyingCollateralToken: string,
  underlyingBorrowToken: string,
  variablePool: string,
  borrowATokenV1_5: string,
  sizeFactory: string,
] & {
  weth: string;
  underlyingCollateralToken: string;
  underlyingBorrowToken: string;
  variablePool: string;
  borrowATokenV1_5: string;
  sizeFactory: string;
};

export type PriceFeedParamsStruct = {
  uniswapV3Pool: AddressLike;
  twapWindow: BigNumberish;
  averageBlockTime: BigNumberish;
  baseToken: AddressLike;
  quoteToken: AddressLike;
  baseAggregator: AddressLike;
  quoteAggregator: AddressLike;
  baseStalePriceInterval: BigNumberish;
  quoteStalePriceInterval: BigNumberish;
  sequencerUptimeFeed: AddressLike;
};

export type PriceFeedParamsStructOutput = [
  uniswapV3Pool: string,
  twapWindow: bigint,
  averageBlockTime: bigint,
  baseToken: string,
  quoteToken: string,
  baseAggregator: string,
  quoteAggregator: string,
  baseStalePriceInterval: bigint,
  quoteStalePriceInterval: bigint,
  sequencerUptimeFeed: string,
] & {
  uniswapV3Pool: string;
  twapWindow: bigint;
  averageBlockTime: bigint;
  baseToken: string;
  quoteToken: string;
  baseAggregator: string;
  quoteAggregator: string;
  baseStalePriceInterval: bigint;
  quoteStalePriceInterval: bigint;
  sequencerUptimeFeed: string;
};

export interface SizeFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "UPGRADE_INTERFACE_VERSION"
      | "acceptOwnership"
      | "authorizationNonces"
      | "authorizations"
      | "createBorrowATokenV1_5"
      | "createMarket"
      | "createPriceFeed"
      | "getMarket"
      | "getMarketDescriptions"
      | "getMarkets"
      | "getMarketsCount"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isAuthorized"
      | "isAuthorizedAll"
      | "isMarket"
      | "multicall"
      | "nonTransferrableScaledTokenV1_5Implementation"
      | "owner"
      | "pendingOwner"
      | "proxiableUUID"
      | "reinitialize"
      | "renounceOwnership"
      | "renounceRole"
      | "revokeAllAuthorizations"
      | "revokeRole"
      | "setAuthorization"
      | "setNonTransferrableScaledTokenV1_5Implementation"
      | "setSizeImplementation"
      | "sizeImplementation"
      | "supportsInterface"
      | "transferOwnership"
      | "upgradeToAndCall"
      | "version",
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CreateBorrowATokenV1_5"
      | "CreateMarket"
      | "CreatePriceFeed"
      | "Initialized"
      | "NonTransferrableScaledTokenV1_5ImplementationSet"
      | "OwnershipTransferStarted"
      | "OwnershipTransferred"
      | "RevokeAllAuthorizations"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "SetAuthorization"
      | "SizeImplementationSet"
      | "Upgraded",
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "authorizationNonces",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "authorizations",
    values: [BigNumberish, AddressLike, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "createBorrowATokenV1_5",
    values: [AddressLike, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "createMarket",
    values: [
      InitializeFeeConfigParamsStruct,
      InitializeRiskConfigParamsStruct,
      InitializeOracleParamsStruct,
      InitializeDataParamsStruct,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: "createPriceFeed",
    values: [PriceFeedParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: "getMarket",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketDescriptions",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "getMarkets",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketsCount",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorized",
    values: [AddressLike, AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorizedAll",
    values: [AddressLike, AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "isMarket",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]],
  ): string;
  encodeFunctionData(
    functionFragment: "nonTransferrableScaledTokenV1_5Implementation",
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "reinitialize",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAllAuthorizations",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthorization",
    values: [AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "setNonTransferrableScaledTokenV1_5Implementation",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "setSizeImplementation",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "sizeImplementation",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizationNonces",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizations",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "createBorrowATokenV1_5",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMarket",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPriceFeed",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "getMarket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMarketDescriptions",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "getMarkets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMarketsCount",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorized",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorizedAll",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "isMarket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nonTransferrableScaledTokenV1_5Implementation",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "reinitialize",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAllAuthorizations",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorization",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNonTransferrableScaledTokenV1_5Implementation",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSizeImplementation",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "sizeImplementation",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace CreateBorrowATokenV1_5Event {
  export type InputTuple = [borrowATokenV1_5: AddressLike];
  export type OutputTuple = [borrowATokenV1_5: string];
  export interface OutputObject {
    borrowATokenV1_5: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreateMarketEvent {
  export type InputTuple = [market: AddressLike];
  export type OutputTuple = [market: string];
  export interface OutputObject {
    market: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreatePriceFeedEvent {
  export type InputTuple = [priceFeed: AddressLike];
  export type OutputTuple = [priceFeed: string];
  export interface OutputObject {
    priceFeed: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NonTransferrableScaledTokenV1_5ImplementationSetEvent {
  export type InputTuple = [
    oldNonTransferrableScaledTokenV1_5Implementation: AddressLike,
    newNonTransferrableScaledTokenV1_5Implementation: AddressLike,
  ];
  export type OutputTuple = [
    oldNonTransferrableScaledTokenV1_5Implementation: string,
    newNonTransferrableScaledTokenV1_5Implementation: string,
  ];
  export interface OutputObject {
    oldNonTransferrableScaledTokenV1_5Implementation: string;
    newNonTransferrableScaledTokenV1_5Implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferStartedEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevokeAllAuthorizationsEvent {
  export type InputTuple = [sender: AddressLike];
  export type OutputTuple = [sender: string];
  export interface OutputObject {
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike,
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string,
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike,
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike,
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetAuthorizationEvent {
  export type InputTuple = [
    sender: AddressLike,
    operator: AddressLike,
    actionsBitmap: BigNumberish,
    nonce: BigNumberish,
  ];
  export type OutputTuple = [
    sender: string,
    operator: string,
    actionsBitmap: bigint,
    nonce: bigint,
  ];
  export interface OutputObject {
    sender: string;
    operator: string;
    actionsBitmap: bigint;
    nonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SizeImplementationSetEvent {
  export type InputTuple = [
    oldSizeImplementation: AddressLike,
    newSizeImplementation: AddressLike,
  ];
  export type OutputTuple = [
    oldSizeImplementation: string,
    newSizeImplementation: string,
  ];
  export interface OutputObject {
    oldSizeImplementation: string;
    newSizeImplementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SizeFactory extends BaseContract {
  connect(runner?: ContractRunner | null): SizeFactory;
  waitForDeployment(): Promise<this>;

  interface: SizeFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  authorizationNonces: TypedContractMethod<
    [onBehalfOf: AddressLike],
    [bigint],
    "view"
  >;

  authorizations: TypedContractMethod<
    [nonce: BigNumberish, operator: AddressLike, onBehalfOf: AddressLike],
    [bigint],
    "view"
  >;

  createBorrowATokenV1_5: TypedContractMethod<
    [variablePool: AddressLike, underlyingBorrowToken: AddressLike],
    [string],
    "nonpayable"
  >;

  createMarket: TypedContractMethod<
    [
      feeConfigParams: InitializeFeeConfigParamsStruct,
      riskConfigParams: InitializeRiskConfigParamsStruct,
      oracleParams: InitializeOracleParamsStruct,
      dataParams: InitializeDataParamsStruct,
    ],
    [string],
    "nonpayable"
  >;

  createPriceFeed: TypedContractMethod<
    [_priceFeedParams: PriceFeedParamsStruct],
    [string],
    "nonpayable"
  >;

  getMarket: TypedContractMethod<[index: BigNumberish], [string], "view">;

  getMarketDescriptions: TypedContractMethod<[], [string[]], "view">;

  getMarkets: TypedContractMethod<[], [string[]], "view">;

  getMarketsCount: TypedContractMethod<[], [bigint], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;

  isAuthorized: TypedContractMethod<
    [operator: AddressLike, onBehalfOf: AddressLike, action: BigNumberish],
    [boolean],
    "view"
  >;

  isAuthorizedAll: TypedContractMethod<
    [
      operator: AddressLike,
      onBehalfOf: AddressLike,
      actionsBitmap: BigNumberish,
    ],
    [boolean],
    "view"
  >;

  isMarket: TypedContractMethod<[candidate: AddressLike], [boolean], "view">;

  multicall: TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;

  nonTransferrableScaledTokenV1_5Implementation: TypedContractMethod<
    [],
    [string],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pendingOwner: TypedContractMethod<[], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  reinitialize: TypedContractMethod<[], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeAllAuthorizations: TypedContractMethod<[], [void], "nonpayable">;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setAuthorization: TypedContractMethod<
    [operator: AddressLike, actionsBitmap: BigNumberish],
    [void],
    "nonpayable"
  >;

  setNonTransferrableScaledTokenV1_5Implementation: TypedContractMethod<
    [_nonTransferrableScaledTokenV1_5Implementation: AddressLike],
    [void],
    "nonpayable"
  >;

  setSizeImplementation: TypedContractMethod<
    [_sizeImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  sizeImplementation: TypedContractMethod<[], [string], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  version: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "acceptOwnership",
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizationNonces",
  ): TypedContractMethod<[onBehalfOf: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "authorizations",
  ): TypedContractMethod<
    [nonce: BigNumberish, operator: AddressLike, onBehalfOf: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "createBorrowATokenV1_5",
  ): TypedContractMethod<
    [variablePool: AddressLike, underlyingBorrowToken: AddressLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createMarket",
  ): TypedContractMethod<
    [
      feeConfigParams: InitializeFeeConfigParamsStruct,
      riskConfigParams: InitializeRiskConfigParamsStruct,
      oracleParams: InitializeOracleParamsStruct,
      dataParams: InitializeDataParamsStruct,
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createPriceFeed",
  ): TypedContractMethod<
    [_priceFeedParams: PriceFeedParamsStruct],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getMarket",
  ): TypedContractMethod<[index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getMarketDescriptions",
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getMarkets",
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getMarketsCount",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin",
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole",
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole",
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize",
  ): TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isAuthorized",
  ): TypedContractMethod<
    [operator: AddressLike, onBehalfOf: AddressLike, action: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isAuthorizedAll",
  ): TypedContractMethod<
    [
      operator: AddressLike,
      onBehalfOf: AddressLike,
      actionsBitmap: BigNumberish,
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isMarket",
  ): TypedContractMethod<[candidate: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "multicall",
  ): TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;
  getFunction(
    nameOrSignature: "nonTransferrableScaledTokenV1_5Implementation",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingOwner",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "reinitialize",
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership",
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole",
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeAllAuthorizations",
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeRole",
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAuthorization",
  ): TypedContractMethod<
    [operator: AddressLike, actionsBitmap: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setNonTransferrableScaledTokenV1_5Implementation",
  ): TypedContractMethod<
    [_nonTransferrableScaledTokenV1_5Implementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSizeImplementation",
  ): TypedContractMethod<
    [_sizeImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sizeImplementation",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "supportsInterface",
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferOwnership",
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeToAndCall",
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "version",
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "CreateBorrowATokenV1_5",
  ): TypedContractEvent<
    CreateBorrowATokenV1_5Event.InputTuple,
    CreateBorrowATokenV1_5Event.OutputTuple,
    CreateBorrowATokenV1_5Event.OutputObject
  >;
  getEvent(
    key: "CreateMarket",
  ): TypedContractEvent<
    CreateMarketEvent.InputTuple,
    CreateMarketEvent.OutputTuple,
    CreateMarketEvent.OutputObject
  >;
  getEvent(
    key: "CreatePriceFeed",
  ): TypedContractEvent<
    CreatePriceFeedEvent.InputTuple,
    CreatePriceFeedEvent.OutputTuple,
    CreatePriceFeedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized",
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "NonTransferrableScaledTokenV1_5ImplementationSet",
  ): TypedContractEvent<
    NonTransferrableScaledTokenV1_5ImplementationSetEvent.InputTuple,
    NonTransferrableScaledTokenV1_5ImplementationSetEvent.OutputTuple,
    NonTransferrableScaledTokenV1_5ImplementationSetEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferStarted",
  ): TypedContractEvent<
    OwnershipTransferStartedEvent.InputTuple,
    OwnershipTransferStartedEvent.OutputTuple,
    OwnershipTransferStartedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred",
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RevokeAllAuthorizations",
  ): TypedContractEvent<
    RevokeAllAuthorizationsEvent.InputTuple,
    RevokeAllAuthorizationsEvent.OutputTuple,
    RevokeAllAuthorizationsEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged",
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted",
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked",
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "SetAuthorization",
  ): TypedContractEvent<
    SetAuthorizationEvent.InputTuple,
    SetAuthorizationEvent.OutputTuple,
    SetAuthorizationEvent.OutputObject
  >;
  getEvent(
    key: "SizeImplementationSet",
  ): TypedContractEvent<
    SizeImplementationSetEvent.InputTuple,
    SizeImplementationSetEvent.OutputTuple,
    SizeImplementationSetEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded",
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "CreateBorrowATokenV1_5(address)": TypedContractEvent<
      CreateBorrowATokenV1_5Event.InputTuple,
      CreateBorrowATokenV1_5Event.OutputTuple,
      CreateBorrowATokenV1_5Event.OutputObject
    >;
    CreateBorrowATokenV1_5: TypedContractEvent<
      CreateBorrowATokenV1_5Event.InputTuple,
      CreateBorrowATokenV1_5Event.OutputTuple,
      CreateBorrowATokenV1_5Event.OutputObject
    >;

    "CreateMarket(address)": TypedContractEvent<
      CreateMarketEvent.InputTuple,
      CreateMarketEvent.OutputTuple,
      CreateMarketEvent.OutputObject
    >;
    CreateMarket: TypedContractEvent<
      CreateMarketEvent.InputTuple,
      CreateMarketEvent.OutputTuple,
      CreateMarketEvent.OutputObject
    >;

    "CreatePriceFeed(address)": TypedContractEvent<
      CreatePriceFeedEvent.InputTuple,
      CreatePriceFeedEvent.OutputTuple,
      CreatePriceFeedEvent.OutputObject
    >;
    CreatePriceFeed: TypedContractEvent<
      CreatePriceFeedEvent.InputTuple,
      CreatePriceFeedEvent.OutputTuple,
      CreatePriceFeedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "NonTransferrableScaledTokenV1_5ImplementationSet(address,address)": TypedContractEvent<
      NonTransferrableScaledTokenV1_5ImplementationSetEvent.InputTuple,
      NonTransferrableScaledTokenV1_5ImplementationSetEvent.OutputTuple,
      NonTransferrableScaledTokenV1_5ImplementationSetEvent.OutputObject
    >;
    NonTransferrableScaledTokenV1_5ImplementationSet: TypedContractEvent<
      NonTransferrableScaledTokenV1_5ImplementationSetEvent.InputTuple,
      NonTransferrableScaledTokenV1_5ImplementationSetEvent.OutputTuple,
      NonTransferrableScaledTokenV1_5ImplementationSetEvent.OutputObject
    >;

    "OwnershipTransferStarted(address,address)": TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;
    OwnershipTransferStarted: TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RevokeAllAuthorizations(address)": TypedContractEvent<
      RevokeAllAuthorizationsEvent.InputTuple,
      RevokeAllAuthorizationsEvent.OutputTuple,
      RevokeAllAuthorizationsEvent.OutputObject
    >;
    RevokeAllAuthorizations: TypedContractEvent<
      RevokeAllAuthorizationsEvent.InputTuple,
      RevokeAllAuthorizationsEvent.OutputTuple,
      RevokeAllAuthorizationsEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "SetAuthorization(address,address,uint256,uint256)": TypedContractEvent<
      SetAuthorizationEvent.InputTuple,
      SetAuthorizationEvent.OutputTuple,
      SetAuthorizationEvent.OutputObject
    >;
    SetAuthorization: TypedContractEvent<
      SetAuthorizationEvent.InputTuple,
      SetAuthorizationEvent.OutputTuple,
      SetAuthorizationEvent.OutputObject
    >;

    "SizeImplementationSet(address,address)": TypedContractEvent<
      SizeImplementationSetEvent.InputTuple,
      SizeImplementationSetEvent.OutputTuple,
      SizeImplementationSetEvent.OutputObject
    >;
    SizeImplementationSet: TypedContractEvent<
      SizeImplementationSetEvent.InputTuple,
      SizeImplementationSetEvent.OutputTuple,
      SizeImplementationSetEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
