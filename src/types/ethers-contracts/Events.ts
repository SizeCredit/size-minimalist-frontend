/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "./common";

export interface EventsInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "BuyCreditLimit"
      | "BuyCreditMarket"
      | "Claim"
      | "Compensate"
      | "CopyLimitOrders"
      | "CreateCreditPosition"
      | "CreateDebtPosition"
      | "Deposit"
      | "Initialize"
      | "Liquidate"
      | "LiquidateWithReplacement"
      | "Repay"
      | "SelfLiquidate"
      | "SellCreditLimit"
      | "SellCreditMarket"
      | "SetUserConfiguration"
      | "SwapData"
      | "UpdateConfig"
      | "UpdateCreditPosition"
      | "UpdateDebtPosition"
      | "VariablePoolBorrowRateUpdated"
      | "Withdraw",
  ): EventFragment;
}

export namespace BuyCreditLimitEvent {
  export type InputTuple = [
    sender: AddressLike,
    maxDueDate: BigNumberish,
    curveRelativeTimeTenors: BigNumberish[],
    curveRelativeTimeAprs: BigNumberish[],
    curveRelativeTimeMarketRateMultipliers: BigNumberish[],
  ];
  export type OutputTuple = [
    sender: string,
    maxDueDate: bigint,
    curveRelativeTimeTenors: bigint[],
    curveRelativeTimeAprs: bigint[],
    curveRelativeTimeMarketRateMultipliers: bigint[],
  ];
  export interface OutputObject {
    sender: string;
    maxDueDate: bigint;
    curveRelativeTimeTenors: bigint[];
    curveRelativeTimeAprs: bigint[];
    curveRelativeTimeMarketRateMultipliers: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BuyCreditMarketEvent {
  export type InputTuple = [
    lender: AddressLike,
    borrower: AddressLike,
    creditPositionId: BigNumberish,
    amount: BigNumberish,
    tenor: BigNumberish,
    deadline: BigNumberish,
    minAPR: BigNumberish,
    exactAmountIn: boolean,
  ];
  export type OutputTuple = [
    lender: string,
    borrower: string,
    creditPositionId: bigint,
    amount: bigint,
    tenor: bigint,
    deadline: bigint,
    minAPR: bigint,
    exactAmountIn: boolean,
  ];
  export interface OutputObject {
    lender: string;
    borrower: string;
    creditPositionId: bigint;
    amount: bigint;
    tenor: bigint;
    deadline: bigint;
    minAPR: bigint;
    exactAmountIn: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimEvent {
  export type InputTuple = [
    sender: AddressLike,
    creditPositionId: BigNumberish,
  ];
  export type OutputTuple = [sender: string, creditPositionId: bigint];
  export interface OutputObject {
    sender: string;
    creditPositionId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CompensateEvent {
  export type InputTuple = [
    sender: AddressLike,
    creditPositionWithDebtToRepayId: BigNumberish,
    creditPositionToCompensateId: BigNumberish,
    amount: BigNumberish,
  ];
  export type OutputTuple = [
    sender: string,
    creditPositionWithDebtToRepayId: bigint,
    creditPositionToCompensateId: bigint,
    amount: bigint,
  ];
  export interface OutputObject {
    sender: string;
    creditPositionWithDebtToRepayId: bigint;
    creditPositionToCompensateId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CopyLimitOrdersEvent {
  export type InputTuple = [
    sender: AddressLike,
    copyAddress: AddressLike,
    minTenorLoanOffer: BigNumberish,
    maxTenorLoanOffer: BigNumberish,
    minAPRLoanOffer: BigNumberish,
    maxAPRLoanOffer: BigNumberish,
    offsetAPRLoanOffer: BigNumberish,
    minTenorBorrowOffer: BigNumberish,
    maxTenorBorrowOffer: BigNumberish,
    minAPRBorrowOffer: BigNumberish,
    maxAPRBorrowOffer: BigNumberish,
    offsetAPRBorrowOffer: BigNumberish,
  ];
  export type OutputTuple = [
    sender: string,
    copyAddress: string,
    minTenorLoanOffer: bigint,
    maxTenorLoanOffer: bigint,
    minAPRLoanOffer: bigint,
    maxAPRLoanOffer: bigint,
    offsetAPRLoanOffer: bigint,
    minTenorBorrowOffer: bigint,
    maxTenorBorrowOffer: bigint,
    minAPRBorrowOffer: bigint,
    maxAPRBorrowOffer: bigint,
    offsetAPRBorrowOffer: bigint,
  ];
  export interface OutputObject {
    sender: string;
    copyAddress: string;
    minTenorLoanOffer: bigint;
    maxTenorLoanOffer: bigint;
    minAPRLoanOffer: bigint;
    maxAPRLoanOffer: bigint;
    offsetAPRLoanOffer: bigint;
    minTenorBorrowOffer: bigint;
    maxTenorBorrowOffer: bigint;
    minAPRBorrowOffer: bigint;
    maxAPRBorrowOffer: bigint;
    offsetAPRBorrowOffer: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreateCreditPositionEvent {
  export type InputTuple = [
    creditPositionId: BigNumberish,
    lender: AddressLike,
    debtPositionId: BigNumberish,
    exitPositionId: BigNumberish,
    credit: BigNumberish,
    forSale: boolean,
  ];
  export type OutputTuple = [
    creditPositionId: bigint,
    lender: string,
    debtPositionId: bigint,
    exitPositionId: bigint,
    credit: bigint,
    forSale: boolean,
  ];
  export interface OutputObject {
    creditPositionId: bigint;
    lender: string;
    debtPositionId: bigint;
    exitPositionId: bigint;
    credit: bigint;
    forSale: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreateDebtPositionEvent {
  export type InputTuple = [
    debtPositionId: BigNumberish,
    borrower: AddressLike,
    lender: AddressLike,
    futureValue: BigNumberish,
    dueDate: BigNumberish,
  ];
  export type OutputTuple = [
    debtPositionId: bigint,
    borrower: string,
    lender: string,
    futureValue: bigint,
    dueDate: bigint,
  ];
  export interface OutputObject {
    debtPositionId: bigint;
    borrower: string;
    lender: string;
    futureValue: bigint;
    dueDate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    sender: AddressLike,
    token: AddressLike,
    to: AddressLike,
    amount: BigNumberish,
  ];
  export type OutputTuple = [
    sender: string,
    token: string,
    to: string,
    amount: bigint,
  ];
  export interface OutputObject {
    sender: string;
    token: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializeEvent {
  export type InputTuple = [sender: AddressLike];
  export type OutputTuple = [sender: string];
  export interface OutputObject {
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidateEvent {
  export type InputTuple = [
    sender: AddressLike,
    debtPositionId: BigNumberish,
    minimumCollateralProfit: BigNumberish,
    deadline: BigNumberish,
    collateralRatio: BigNumberish,
    loanStatus: BigNumberish,
  ];
  export type OutputTuple = [
    sender: string,
    debtPositionId: bigint,
    minimumCollateralProfit: bigint,
    deadline: bigint,
    collateralRatio: bigint,
    loanStatus: bigint,
  ];
  export interface OutputObject {
    sender: string;
    debtPositionId: bigint;
    minimumCollateralProfit: bigint;
    deadline: bigint;
    collateralRatio: bigint;
    loanStatus: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidateWithReplacementEvent {
  export type InputTuple = [
    sender: AddressLike,
    debtPositionId: BigNumberish,
    borrower: AddressLike,
    minimumCollateralProfit: BigNumberish,
    deadline: BigNumberish,
    minAPR: BigNumberish,
  ];
  export type OutputTuple = [
    sender: string,
    debtPositionId: bigint,
    borrower: string,
    minimumCollateralProfit: bigint,
    deadline: bigint,
    minAPR: bigint,
  ];
  export interface OutputObject {
    sender: string;
    debtPositionId: bigint;
    borrower: string;
    minimumCollateralProfit: bigint;
    deadline: bigint;
    minAPR: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RepayEvent {
  export type InputTuple = [
    sender: AddressLike,
    debtPositionId: BigNumberish,
    borrower: AddressLike,
  ];
  export type OutputTuple = [
    sender: string,
    debtPositionId: bigint,
    borrower: string,
  ];
  export interface OutputObject {
    sender: string;
    debtPositionId: bigint;
    borrower: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SelfLiquidateEvent {
  export type InputTuple = [
    sender: AddressLike,
    creditPositionId: BigNumberish,
  ];
  export type OutputTuple = [sender: string, creditPositionId: bigint];
  export interface OutputObject {
    sender: string;
    creditPositionId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SellCreditLimitEvent {
  export type InputTuple = [
    sender: AddressLike,
    maxDueDate: BigNumberish,
    curveRelativeTimeTenors: BigNumberish[],
    curveRelativeTimeAprs: BigNumberish[],
    curveRelativeTimeMarketRateMultipliers: BigNumberish[],
  ];
  export type OutputTuple = [
    sender: string,
    maxDueDate: bigint,
    curveRelativeTimeTenors: bigint[],
    curveRelativeTimeAprs: bigint[],
    curveRelativeTimeMarketRateMultipliers: bigint[],
  ];
  export interface OutputObject {
    sender: string;
    maxDueDate: bigint;
    curveRelativeTimeTenors: bigint[];
    curveRelativeTimeAprs: bigint[];
    curveRelativeTimeMarketRateMultipliers: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SellCreditMarketEvent {
  export type InputTuple = [
    borrower: AddressLike,
    lender: AddressLike,
    creditPositionId: BigNumberish,
    amount: BigNumberish,
    tenor: BigNumberish,
    deadline: BigNumberish,
    maxAPR: BigNumberish,
    exactAmountIn: boolean,
  ];
  export type OutputTuple = [
    borrower: string,
    lender: string,
    creditPositionId: bigint,
    amount: bigint,
    tenor: bigint,
    deadline: bigint,
    maxAPR: bigint,
    exactAmountIn: boolean,
  ];
  export interface OutputObject {
    borrower: string;
    lender: string;
    creditPositionId: bigint;
    amount: bigint;
    tenor: bigint;
    deadline: bigint;
    maxAPR: bigint;
    exactAmountIn: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetUserConfigurationEvent {
  export type InputTuple = [
    sender: AddressLike,
    openingLimitBorrowCR: BigNumberish,
    allCreditPositionsForSaleDisabled: boolean,
    creditPositionIdsForSale: boolean,
    creditPositionIds: BigNumberish[],
  ];
  export type OutputTuple = [
    sender: string,
    openingLimitBorrowCR: bigint,
    allCreditPositionsForSaleDisabled: boolean,
    creditPositionIdsForSale: boolean,
    creditPositionIds: bigint[],
  ];
  export interface OutputObject {
    sender: string;
    openingLimitBorrowCR: bigint;
    allCreditPositionsForSaleDisabled: boolean;
    creditPositionIdsForSale: boolean;
    creditPositionIds: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapDataEvent {
  export type InputTuple = [
    creditPositionId: BigNumberish,
    borrower: AddressLike,
    lender: AddressLike,
    credit: BigNumberish,
    cashIn: BigNumberish,
    cashOut: BigNumberish,
    swapFee: BigNumberish,
    fragmentationFee: BigNumberish,
    tenor: BigNumberish,
  ];
  export type OutputTuple = [
    creditPositionId: bigint,
    borrower: string,
    lender: string,
    credit: bigint,
    cashIn: bigint,
    cashOut: bigint,
    swapFee: bigint,
    fragmentationFee: bigint,
    tenor: bigint,
  ];
  export interface OutputObject {
    creditPositionId: bigint;
    borrower: string;
    lender: string;
    credit: bigint;
    cashIn: bigint;
    cashOut: bigint;
    swapFee: bigint;
    fragmentationFee: bigint;
    tenor: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateConfigEvent {
  export type InputTuple = [
    sender: AddressLike,
    key: string,
    value: BigNumberish,
  ];
  export type OutputTuple = [sender: string, key: string, value: bigint];
  export interface OutputObject {
    sender: string;
    key: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateCreditPositionEvent {
  export type InputTuple = [
    creditPositionId: BigNumberish,
    lender: AddressLike,
    credit: BigNumberish,
    forSale: boolean,
  ];
  export type OutputTuple = [
    creditPositionId: bigint,
    lender: string,
    credit: bigint,
    forSale: boolean,
  ];
  export interface OutputObject {
    creditPositionId: bigint;
    lender: string;
    credit: bigint;
    forSale: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateDebtPositionEvent {
  export type InputTuple = [
    debtPositionId: BigNumberish,
    borrower: AddressLike,
    futureValue: BigNumberish,
    liquidityIndexAtRepayment: BigNumberish,
  ];
  export type OutputTuple = [
    debtPositionId: bigint,
    borrower: string,
    futureValue: bigint,
    liquidityIndexAtRepayment: bigint,
  ];
  export interface OutputObject {
    debtPositionId: bigint;
    borrower: string;
    futureValue: bigint;
    liquidityIndexAtRepayment: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VariablePoolBorrowRateUpdatedEvent {
  export type InputTuple = [
    sender: AddressLike,
    oldBorrowRate: BigNumberish,
    newBorrowRate: BigNumberish,
  ];
  export type OutputTuple = [
    sender: string,
    oldBorrowRate: bigint,
    newBorrowRate: bigint,
  ];
  export interface OutputObject {
    sender: string;
    oldBorrowRate: bigint;
    newBorrowRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    sender: AddressLike,
    token: AddressLike,
    to: AddressLike,
    amount: BigNumberish,
  ];
  export type OutputTuple = [
    sender: string,
    token: string,
    to: string,
    amount: bigint,
  ];
  export interface OutputObject {
    sender: string;
    token: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Events extends BaseContract {
  connect(runner?: ContractRunner | null): Events;
  waitForDeployment(): Promise<this>;

  interface: EventsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getEvent(
    key: "BuyCreditLimit",
  ): TypedContractEvent<
    BuyCreditLimitEvent.InputTuple,
    BuyCreditLimitEvent.OutputTuple,
    BuyCreditLimitEvent.OutputObject
  >;
  getEvent(
    key: "BuyCreditMarket",
  ): TypedContractEvent<
    BuyCreditMarketEvent.InputTuple,
    BuyCreditMarketEvent.OutputTuple,
    BuyCreditMarketEvent.OutputObject
  >;
  getEvent(
    key: "Claim",
  ): TypedContractEvent<
    ClaimEvent.InputTuple,
    ClaimEvent.OutputTuple,
    ClaimEvent.OutputObject
  >;
  getEvent(
    key: "Compensate",
  ): TypedContractEvent<
    CompensateEvent.InputTuple,
    CompensateEvent.OutputTuple,
    CompensateEvent.OutputObject
  >;
  getEvent(
    key: "CopyLimitOrders",
  ): TypedContractEvent<
    CopyLimitOrdersEvent.InputTuple,
    CopyLimitOrdersEvent.OutputTuple,
    CopyLimitOrdersEvent.OutputObject
  >;
  getEvent(
    key: "CreateCreditPosition",
  ): TypedContractEvent<
    CreateCreditPositionEvent.InputTuple,
    CreateCreditPositionEvent.OutputTuple,
    CreateCreditPositionEvent.OutputObject
  >;
  getEvent(
    key: "CreateDebtPosition",
  ): TypedContractEvent<
    CreateDebtPositionEvent.InputTuple,
    CreateDebtPositionEvent.OutputTuple,
    CreateDebtPositionEvent.OutputObject
  >;
  getEvent(
    key: "Deposit",
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "Initialize",
  ): TypedContractEvent<
    InitializeEvent.InputTuple,
    InitializeEvent.OutputTuple,
    InitializeEvent.OutputObject
  >;
  getEvent(
    key: "Liquidate",
  ): TypedContractEvent<
    LiquidateEvent.InputTuple,
    LiquidateEvent.OutputTuple,
    LiquidateEvent.OutputObject
  >;
  getEvent(
    key: "LiquidateWithReplacement",
  ): TypedContractEvent<
    LiquidateWithReplacementEvent.InputTuple,
    LiquidateWithReplacementEvent.OutputTuple,
    LiquidateWithReplacementEvent.OutputObject
  >;
  getEvent(
    key: "Repay",
  ): TypedContractEvent<
    RepayEvent.InputTuple,
    RepayEvent.OutputTuple,
    RepayEvent.OutputObject
  >;
  getEvent(
    key: "SelfLiquidate",
  ): TypedContractEvent<
    SelfLiquidateEvent.InputTuple,
    SelfLiquidateEvent.OutputTuple,
    SelfLiquidateEvent.OutputObject
  >;
  getEvent(
    key: "SellCreditLimit",
  ): TypedContractEvent<
    SellCreditLimitEvent.InputTuple,
    SellCreditLimitEvent.OutputTuple,
    SellCreditLimitEvent.OutputObject
  >;
  getEvent(
    key: "SellCreditMarket",
  ): TypedContractEvent<
    SellCreditMarketEvent.InputTuple,
    SellCreditMarketEvent.OutputTuple,
    SellCreditMarketEvent.OutputObject
  >;
  getEvent(
    key: "SetUserConfiguration",
  ): TypedContractEvent<
    SetUserConfigurationEvent.InputTuple,
    SetUserConfigurationEvent.OutputTuple,
    SetUserConfigurationEvent.OutputObject
  >;
  getEvent(
    key: "SwapData",
  ): TypedContractEvent<
    SwapDataEvent.InputTuple,
    SwapDataEvent.OutputTuple,
    SwapDataEvent.OutputObject
  >;
  getEvent(
    key: "UpdateConfig",
  ): TypedContractEvent<
    UpdateConfigEvent.InputTuple,
    UpdateConfigEvent.OutputTuple,
    UpdateConfigEvent.OutputObject
  >;
  getEvent(
    key: "UpdateCreditPosition",
  ): TypedContractEvent<
    UpdateCreditPositionEvent.InputTuple,
    UpdateCreditPositionEvent.OutputTuple,
    UpdateCreditPositionEvent.OutputObject
  >;
  getEvent(
    key: "UpdateDebtPosition",
  ): TypedContractEvent<
    UpdateDebtPositionEvent.InputTuple,
    UpdateDebtPositionEvent.OutputTuple,
    UpdateDebtPositionEvent.OutputObject
  >;
  getEvent(
    key: "VariablePoolBorrowRateUpdated",
  ): TypedContractEvent<
    VariablePoolBorrowRateUpdatedEvent.InputTuple,
    VariablePoolBorrowRateUpdatedEvent.OutputTuple,
    VariablePoolBorrowRateUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw",
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "BuyCreditLimit(address,uint256,uint256[],int256[],uint256[])": TypedContractEvent<
      BuyCreditLimitEvent.InputTuple,
      BuyCreditLimitEvent.OutputTuple,
      BuyCreditLimitEvent.OutputObject
    >;
    BuyCreditLimit: TypedContractEvent<
      BuyCreditLimitEvent.InputTuple,
      BuyCreditLimitEvent.OutputTuple,
      BuyCreditLimitEvent.OutputObject
    >;

    "BuyCreditMarket(address,address,uint256,uint256,uint256,uint256,uint256,bool)": TypedContractEvent<
      BuyCreditMarketEvent.InputTuple,
      BuyCreditMarketEvent.OutputTuple,
      BuyCreditMarketEvent.OutputObject
    >;
    BuyCreditMarket: TypedContractEvent<
      BuyCreditMarketEvent.InputTuple,
      BuyCreditMarketEvent.OutputTuple,
      BuyCreditMarketEvent.OutputObject
    >;

    "Claim(address,uint256)": TypedContractEvent<
      ClaimEvent.InputTuple,
      ClaimEvent.OutputTuple,
      ClaimEvent.OutputObject
    >;
    Claim: TypedContractEvent<
      ClaimEvent.InputTuple,
      ClaimEvent.OutputTuple,
      ClaimEvent.OutputObject
    >;

    "Compensate(address,uint256,uint256,uint256)": TypedContractEvent<
      CompensateEvent.InputTuple,
      CompensateEvent.OutputTuple,
      CompensateEvent.OutputObject
    >;
    Compensate: TypedContractEvent<
      CompensateEvent.InputTuple,
      CompensateEvent.OutputTuple,
      CompensateEvent.OutputObject
    >;

    "CopyLimitOrders(address,address,uint256,uint256,uint256,uint256,int256,uint256,uint256,uint256,uint256,int256)": TypedContractEvent<
      CopyLimitOrdersEvent.InputTuple,
      CopyLimitOrdersEvent.OutputTuple,
      CopyLimitOrdersEvent.OutputObject
    >;
    CopyLimitOrders: TypedContractEvent<
      CopyLimitOrdersEvent.InputTuple,
      CopyLimitOrdersEvent.OutputTuple,
      CopyLimitOrdersEvent.OutputObject
    >;

    "CreateCreditPosition(uint256,address,uint256,uint256,uint256,bool)": TypedContractEvent<
      CreateCreditPositionEvent.InputTuple,
      CreateCreditPositionEvent.OutputTuple,
      CreateCreditPositionEvent.OutputObject
    >;
    CreateCreditPosition: TypedContractEvent<
      CreateCreditPositionEvent.InputTuple,
      CreateCreditPositionEvent.OutputTuple,
      CreateCreditPositionEvent.OutputObject
    >;

    "CreateDebtPosition(uint256,address,address,uint256,uint256)": TypedContractEvent<
      CreateDebtPositionEvent.InputTuple,
      CreateDebtPositionEvent.OutputTuple,
      CreateDebtPositionEvent.OutputObject
    >;
    CreateDebtPosition: TypedContractEvent<
      CreateDebtPositionEvent.InputTuple,
      CreateDebtPositionEvent.OutputTuple,
      CreateDebtPositionEvent.OutputObject
    >;

    "Deposit(address,address,address,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "Initialize(address)": TypedContractEvent<
      InitializeEvent.InputTuple,
      InitializeEvent.OutputTuple,
      InitializeEvent.OutputObject
    >;
    Initialize: TypedContractEvent<
      InitializeEvent.InputTuple,
      InitializeEvent.OutputTuple,
      InitializeEvent.OutputObject
    >;

    "Liquidate(address,uint256,uint256,uint256,uint256,uint8)": TypedContractEvent<
      LiquidateEvent.InputTuple,
      LiquidateEvent.OutputTuple,
      LiquidateEvent.OutputObject
    >;
    Liquidate: TypedContractEvent<
      LiquidateEvent.InputTuple,
      LiquidateEvent.OutputTuple,
      LiquidateEvent.OutputObject
    >;

    "LiquidateWithReplacement(address,uint256,address,uint256,uint256,uint256)": TypedContractEvent<
      LiquidateWithReplacementEvent.InputTuple,
      LiquidateWithReplacementEvent.OutputTuple,
      LiquidateWithReplacementEvent.OutputObject
    >;
    LiquidateWithReplacement: TypedContractEvent<
      LiquidateWithReplacementEvent.InputTuple,
      LiquidateWithReplacementEvent.OutputTuple,
      LiquidateWithReplacementEvent.OutputObject
    >;

    "Repay(address,uint256,address)": TypedContractEvent<
      RepayEvent.InputTuple,
      RepayEvent.OutputTuple,
      RepayEvent.OutputObject
    >;
    Repay: TypedContractEvent<
      RepayEvent.InputTuple,
      RepayEvent.OutputTuple,
      RepayEvent.OutputObject
    >;

    "SelfLiquidate(address,uint256)": TypedContractEvent<
      SelfLiquidateEvent.InputTuple,
      SelfLiquidateEvent.OutputTuple,
      SelfLiquidateEvent.OutputObject
    >;
    SelfLiquidate: TypedContractEvent<
      SelfLiquidateEvent.InputTuple,
      SelfLiquidateEvent.OutputTuple,
      SelfLiquidateEvent.OutputObject
    >;

    "SellCreditLimit(address,uint256,uint256[],int256[],uint256[])": TypedContractEvent<
      SellCreditLimitEvent.InputTuple,
      SellCreditLimitEvent.OutputTuple,
      SellCreditLimitEvent.OutputObject
    >;
    SellCreditLimit: TypedContractEvent<
      SellCreditLimitEvent.InputTuple,
      SellCreditLimitEvent.OutputTuple,
      SellCreditLimitEvent.OutputObject
    >;

    "SellCreditMarket(address,address,uint256,uint256,uint256,uint256,uint256,bool)": TypedContractEvent<
      SellCreditMarketEvent.InputTuple,
      SellCreditMarketEvent.OutputTuple,
      SellCreditMarketEvent.OutputObject
    >;
    SellCreditMarket: TypedContractEvent<
      SellCreditMarketEvent.InputTuple,
      SellCreditMarketEvent.OutputTuple,
      SellCreditMarketEvent.OutputObject
    >;

    "SetUserConfiguration(address,uint256,bool,bool,uint256[])": TypedContractEvent<
      SetUserConfigurationEvent.InputTuple,
      SetUserConfigurationEvent.OutputTuple,
      SetUserConfigurationEvent.OutputObject
    >;
    SetUserConfiguration: TypedContractEvent<
      SetUserConfigurationEvent.InputTuple,
      SetUserConfigurationEvent.OutputTuple,
      SetUserConfigurationEvent.OutputObject
    >;

    "SwapData(uint256,address,address,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      SwapDataEvent.InputTuple,
      SwapDataEvent.OutputTuple,
      SwapDataEvent.OutputObject
    >;
    SwapData: TypedContractEvent<
      SwapDataEvent.InputTuple,
      SwapDataEvent.OutputTuple,
      SwapDataEvent.OutputObject
    >;

    "UpdateConfig(address,string,uint256)": TypedContractEvent<
      UpdateConfigEvent.InputTuple,
      UpdateConfigEvent.OutputTuple,
      UpdateConfigEvent.OutputObject
    >;
    UpdateConfig: TypedContractEvent<
      UpdateConfigEvent.InputTuple,
      UpdateConfigEvent.OutputTuple,
      UpdateConfigEvent.OutputObject
    >;

    "UpdateCreditPosition(uint256,address,uint256,bool)": TypedContractEvent<
      UpdateCreditPositionEvent.InputTuple,
      UpdateCreditPositionEvent.OutputTuple,
      UpdateCreditPositionEvent.OutputObject
    >;
    UpdateCreditPosition: TypedContractEvent<
      UpdateCreditPositionEvent.InputTuple,
      UpdateCreditPositionEvent.OutputTuple,
      UpdateCreditPositionEvent.OutputObject
    >;

    "UpdateDebtPosition(uint256,address,uint256,uint256)": TypedContractEvent<
      UpdateDebtPositionEvent.InputTuple,
      UpdateDebtPositionEvent.OutputTuple,
      UpdateDebtPositionEvent.OutputObject
    >;
    UpdateDebtPosition: TypedContractEvent<
      UpdateDebtPositionEvent.InputTuple,
      UpdateDebtPositionEvent.OutputTuple,
      UpdateDebtPositionEvent.OutputObject
    >;

    "VariablePoolBorrowRateUpdated(address,uint128,uint128)": TypedContractEvent<
      VariablePoolBorrowRateUpdatedEvent.InputTuple,
      VariablePoolBorrowRateUpdatedEvent.OutputTuple,
      VariablePoolBorrowRateUpdatedEvent.OutputObject
    >;
    VariablePoolBorrowRateUpdated: TypedContractEvent<
      VariablePoolBorrowRateUpdatedEvent.InputTuple,
      VariablePoolBorrowRateUpdatedEvent.OutputTuple,
      VariablePoolBorrowRateUpdatedEvent.OutputObject
    >;

    "Withdraw(address,address,address,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
